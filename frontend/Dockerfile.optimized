# Multi-stage build for optimized frontend
# Stage 1: Dependencies
FROM node:22-bookworm-slim AS deps

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Avoid optional native deps to keep image portable
ENV npm_config_optional=false
# Install dependencies with optimization
RUN npm ci --only=production --no-audit --no-fund --no-optional

# Stage 2: Development build
FROM node:22-bookworm-slim AS dev-build

WORKDIR /app

# Copy package files and install all dependencies
COPY package*.json ./
# Avoid optional native deps here as well
ENV npm_config_optional=false
RUN npm ci --no-audit --no-fund --no-optional

# Copy source code
COPY . .

# Build for development
RUN npm run build

# Stage 3: Production build
FROM node:22-bookworm-slim AS prod-build

WORKDIR /app

# Copy package files and install all dependencies
COPY package*.json ./
# Remove lockfile to avoid npm optional dependency bug across architectures
RUN rm -f package-lock.json && npm install --no-audit --no-fund

# Copy source code
COPY . .

# Build for production
ENV ROLLUP_SKIP_NODEJS_NATIVE=true
RUN npm run build

# Stage 4: Development runtime
FROM node:22-alpine AS development

# Install runtime dependencies
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy source code
COPY --chown=nextjs:nodejs . .

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5173 || exit 1

# Expose port
EXPOSE 5173

# Start development server
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Stage 5: Production runtime with nginx
FROM nginx:alpine AS production

# Install runtime dependencies
RUN apk add --no-cache curl

# Copy built files from prod-build stage
COPY --from=prod-build /app/dist /usr/share/nginx/html

# Copy optimized nginx configuration
COPY nginx.optimized.conf /etc/nginx/nginx.conf

# Use default nginx user provided by the image

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
