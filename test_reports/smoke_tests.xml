<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="17" skipped="0" tests="17" time="2.332" timestamp="2025-08-14T20:41:04.843448+05:30" hostname="Viveks-MacBook-Air.local"><testcase classname="tests.backend.test_auth" name="test_login_returns_token" time="0.028"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.id AS users_id, users.username AS users_username, users.password_hash AS users_password_hash, users.role_id AS users_role_id &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('admin', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlite3.OperationalError: no such table: users

The above exception was the direct cause of the following exception:
tests/backend/test_auth.py:9: in test_login_returns_token
    resp = await ac.post("/api/auth/login", json={"username": "admin", "password": "admin123"})
.venv/lib/python3.13/site-packages/httpx/_client.py:1892: in post
    return await self.request(
.venv/lib/python3.13/site-packages/httpx/_client.py:1574: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.13/site-packages/httpx/_client.py:1661: in send
    response = await self._send_handling_auth(
.venv/lib/python3.13/site-packages/httpx/_client.py:1689: in _send_handling_auth
    response = await self._send_handling_redirects(
.venv/lib/python3.13/site-packages/httpx/_client.py:1726: in _send_handling_redirects
    response = await self._send_single_request(request)
.venv/lib/python3.13/site-packages/httpx/_client.py:1763: in _send_single_request
    response = await transport.handle_async_request(request)
.venv/lib/python3.13/site-packages/httpx/_transports/asgi.py:164: in handle_async_request
    await self.app(scope, receive, send)
.venv/lib/python3.13/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.13/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.13/site-packages/starlette/middleware/exceptions.py:65: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.13/site-packages/starlette/routing.py:756: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/routing.py:776: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/routing.py:297: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/routing.py:77: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.13/site-packages/starlette/routing.py:72: in app
    response = await func(request)
.venv/lib/python3.13/site-packages/fastapi/routing.py:278: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.13/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.13/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.13/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.13/site-packages/anyio/_backends/_asyncio.py:2476: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.13/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
backend/app/routers.py:125: in login
    user = authenticate_user(db, payload.username, payload.password)
backend/app/auth.py:31: in authenticate_user
    user = db.query(User).filter(User.username == username).first()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2728: in first
    return self.limit(1)._iter().first()  # type: ignore
.venv/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2827: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2362: in execute
    return self._execute_internal(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2247: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/context.py:305: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E   [SQL: SELECT users.id AS users_id, users.username AS users_username, users.password_hash AS users_password_hash, users.role_id AS users_role_id 
E   FROM users 
E   WHERE users.username = ?
E    LIMIT ? OFFSET ?]
E   [parameters: ('admin', 1, 0)]
E   (Background on this error at: https://sqlalche.me/e/20/e3q8)</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_create_purchase_payment_success" time="0.008"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-001', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:57: in test_create_purchase_payment_success
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-001', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_create_purchase_payment_invalid_purchase" time="0.001"><failure message="assert 401 == 404&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">tests/backend/test_purchase_payments.py:98: in test_create_purchase_payment_invalid_purchase
    assert response.status_code == 404
E   assert 401 == 404
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_create_purchase_payment_invalid_amount" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-002', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:126: in test_create_purchase_payment_invalid_amount
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-002', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_list_purchase_payments" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-003', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:165: in test_list_purchase_payments
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-003', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_list_purchase_payments_no_payments" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-004', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:238: in test_list_purchase_payments_no_payments
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-004', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_purchase_payment_full_payment" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-005', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:274: in test_purchase_payment_full_payment
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-005', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_purchase_payment_validation" time="0.006"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-006', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:319: in test_purchase_payment_validation
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-006', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_purchase_payments.TestPurchasePayments" name="test_purchase_payment_edge_cases" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'purchase_no': 'PUR-007', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_purchase_payments.py:361: in test_purchase_payment_edge_cases
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'purchase_no': 'PUR-007', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_create_invoice_payment_success" time="0.006"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:69: in test_create_invoice_payment_success
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_create_invoice_payment_invalid_invoice" time="0.001"><failure message="assert 401 == 404&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">tests/backend/test_invoice_payments.py:110: in test_create_invoice_payment_invalid_invoice
    assert response.status_code == 404
E   assert 401 == 404
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_list_invoice_payments" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:150: in test_list_invoice_payments
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_invoice_payment_full_payment" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:229: in test_invoice_payment_full_payment
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_invoice_payment_validation" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:286: in test_invoice_payment_validation
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_delete_invoice_payment" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('500.00'), 'paid_amount': Decimal('500.00'), 'status': 'Partially Paid', 'date': '2025-01-14', 'grand_total': Decimal('1000 ... (160 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:340: in test_delete_invoice_payment
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('500.00'), 'paid_amount': Decimal('500.00'), 'status': 'Partially Paid', 'date': '2025-01-14', 'grand_total': Decimal('1000 ... (160 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_invoice_payment_edge_cases" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:404: in test_invoice_payment_edge_cases
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase><testcase classname="tests.backend.test_invoice_payments.TestInvoicePayments" name="test_invoice_payment_multiple_payments" time="0.005"><failure message="sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.&#10;[SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]&#10;[parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]">.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.

The above exception was the direct cause of the following exception:
tests/backend/test_invoice_payments.py:465: in test_invoice_payment_multiple_payments
    db.commit()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context
    self._handle_dbapi_exception(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context
    context = constructor(
.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled
    flattened_processors[key](compiled_params[key])
.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process
    raise TypeError(
E   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
E   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]
E   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]</failure></testcase></testsuite></testsuites>