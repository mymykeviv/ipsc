{
  "version": "1.37.0",
  "timestamp": "2025-08-14T20:41:10.293187",
  "test_summary": {
    "total_test_suites": 4,
    "successful_suites": 0,
    "failed_suites": 4,
    "success_rate": 0.0
  },
  "test_results": {
    "smoke": {
      "return_code": 1,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.5, pytest-8.3.2, pluggy-1.6.0\nrootdir: /Users/vivekm/code/ipsc\nconfigfile: pyproject.toml\nplugins: asyncio-0.23.8, anyio-4.10.0\nasyncio: mode=Mode.STRICT\ncollected 17 items\n\ntests/backend/test_auth.py F                                             [  5%]\ntests/backend/test_purchase_payments.py FFFFFFFF                         [ 52%]\ntests/backend/test_invoice_payments.py FFFFFFFF                          [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_login_returns_token ___________________________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context\n    self.dialect.do_execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:941: in do_execute\n    cursor.execute(statement, parameters)\nE   sqlite3.OperationalError: no such table: users\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_auth.py:9: in test_login_returns_token\n    resp = await ac.post(\"/api/auth/login\", json={\"username\": \"admin\", \"password\": \"admin123\"})\n.venv/lib/python3.13/site-packages/httpx/_client.py:1892: in post\n    return await self.request(\n.venv/lib/python3.13/site-packages/httpx/_client.py:1574: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n.venv/lib/python3.13/site-packages/httpx/_client.py:1661: in send\n    response = await self._send_handling_auth(\n.venv/lib/python3.13/site-packages/httpx/_client.py:1689: in _send_handling_auth\n    response = await self._send_handling_redirects(\n.venv/lib/python3.13/site-packages/httpx/_client.py:1726: in _send_handling_redirects\n    response = await self._send_single_request(request)\n.venv/lib/python3.13/site-packages/httpx/_client.py:1763: in _send_single_request\n    response = await transport.handle_async_request(request)\n.venv/lib/python3.13/site-packages/httpx/_transports/asgi.py:164: in handle_async_request\n    await self.app(scope, receive, send)\n.venv/lib/python3.13/site-packages/fastapi/applications.py:1054: in __call__\n    await super().__call__(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/applications.py:123: in __call__\n    await self.middleware_stack(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/middleware/errors.py:186: in __call__\n    raise exc\n.venv/lib/python3.13/site-packages/starlette/middleware/errors.py:164: in __call__\n    await self.app(scope, receive, _send)\n.venv/lib/python3.13/site-packages/starlette/middleware/exceptions.py:65: in __call__\n    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:64: in wrapped_app\n    raise exc\n.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:53: in wrapped_app\n    await app(scope, receive, sender)\n.venv/lib/python3.13/site-packages/starlette/routing.py:756: in __call__\n    await self.middleware_stack(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/routing.py:776: in app\n    await route.handle(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/routing.py:297: in handle\n    await self.app(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/routing.py:77: in app\n    await wrap_app_handling_exceptions(app, request)(scope, receive, send)\n.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:64: in wrapped_app\n    raise exc\n.venv/lib/python3.13/site-packages/starlette/_exception_handler.py:53: in wrapped_app\n    await app(scope, receive, sender)\n.venv/lib/python3.13/site-packages/starlette/routing.py:72: in app\n    response = await func(request)\n.venv/lib/python3.13/site-packages/fastapi/routing.py:278: in app\n    raw_response = await run_endpoint_function(\n.venv/lib/python3.13/site-packages/fastapi/routing.py:193: in run_endpoint_function\n    return await run_in_threadpool(dependant.call, **values)\n.venv/lib/python3.13/site-packages/starlette/concurrency.py:42: in run_in_threadpool\n    return await anyio.to_thread.run_sync(func, *args)\n.venv/lib/python3.13/site-packages/anyio/to_thread.py:56: in run_sync\n    return await get_async_backend().run_sync_in_worker_thread(\n.venv/lib/python3.13/site-packages/anyio/_backends/_asyncio.py:2476: in run_sync_in_worker_thread\n    return await future\n.venv/lib/python3.13/site-packages/anyio/_backends/_asyncio.py:967: in run\n    result = context.run(func, *args)\nbackend/app/routers.py:125: in login\n    user = authenticate_user(db, payload.username, payload.password)\nbackend/app/auth.py:31: in authenticate_user\n    user = db.query(User).filter(User.username == username).first()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2728: in first\n    return self.limit(1)._iter().first()  # type: ignore\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/query.py:2827: in _iter\n    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2362: in execute\n    return self._execute_internal(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2247: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/context.py:305: in orm_execute_statement\n    result = conn.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context\n    return self._exec_single_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context\n    self.dialect.do_execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:941: in do_execute\n    cursor.execute(statement, parameters)\nE   sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users\nE   [SQL: SELECT users.id AS users_id, users.username AS users_username, users.password_hash AS users_password_hash, users.role_id AS users_role_id \nE   FROM users \nE   WHERE users.username = ?\nE    LIMIT ? OFFSET ?]\nE   [parameters: ('admin', 1, 0)]\nE   (Background on this error at: https://sqlalche.me/e/20/e3q8)\n__________ TestPurchasePayments.test_create_purchase_payment_success ___________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:57: in test_create_purchase_payment_success\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-001', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n______ TestPurchasePayments.test_create_purchase_payment_invalid_purchase ______\ntests/backend/test_purchase_payments.py:98: in test_create_purchase_payment_invalid_purchase\n    assert response.status_code == 404\nE   assert 401 == 404\nE    +  where 401 = <Response [401 Unauthorized]>.status_code\n_______ TestPurchasePayments.test_create_purchase_payment_invalid_amount _______\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:126: in test_create_purchase_payment_invalid_amount\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-002', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n_______________ TestPurchasePayments.test_list_purchase_payments _______________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:165: in test_list_purchase_payments\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-003', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n_________ TestPurchasePayments.test_list_purchase_payments_no_payments _________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:238: in test_list_purchase_payments_no_payments\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-004', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n___________ TestPurchasePayments.test_purchase_payment_full_payment ____________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:274: in test_purchase_payment_full_payment\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-005', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n____________ TestPurchasePayments.test_purchase_payment_validation _____________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:319: in test_purchase_payment_validation\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-006', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n____________ TestPurchasePayments.test_purchase_payment_edge_cases _____________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_purchase_payments.py:361: in test_purchase_payment_edge_cases\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO purchases (vendor_id, purchase_no, date, due_date, terms, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_from_address, ship_from_address, taxable_value, total_discount, cgst, sgst, igst, grand_total, paid_amount, balance_amount, notes, status, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'purchase_no': 'PUR-007', 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'balance_amount ... (135 characters truncated) ... able_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_from_address': None, 'sgst': None, 'ship_from_address': None, 'igst': None}]]\n___________ TestInvoicePayments.test_create_invoice_payment_success ____________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:69: in test_create_invoice_payment_success\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n_______ TestInvoicePayments.test_create_invoice_payment_invalid_invoice ________\ntests/backend/test_invoice_payments.py:110: in test_create_invoice_payment_invalid_invoice\n    assert response.status_code == 404\nE   assert 401 == 404\nE    +  where 401 = <Response [401 Unauthorized]>.status_code\n________________ TestInvoicePayments.test_list_invoice_payments ________________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:150: in test_list_invoice_payments\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n____________ TestInvoicePayments.test_invoice_payment_full_payment _____________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:229: in test_invoice_payment_full_payment\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n_____________ TestInvoicePayments.test_invoice_payment_validation ______________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:286: in test_invoice_payment_validation\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n_______________ TestInvoicePayments.test_delete_invoice_payment ________________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:340: in test_delete_invoice_payment\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('500.00'), 'paid_amount': Decimal('500.00'), 'status': 'Partially Paid', 'date': '2025-01-14', 'grand_total': Decimal('1000 ... (160 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n_____________ TestInvoicePayments.test_invoice_payment_edge_cases ______________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:404: in test_invoice_payment_edge_cases\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n__________ TestInvoicePayments.test_invoice_payment_multiple_payments __________\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   TypeError: SQLite DateTime type only accepts Python datetime and date objects as input.\n\nThe above exception was the direct cause of the following exception:\ntests/backend/test_invoice_payments.py:465: in test_invoice_payment_multiple_payments\n    db.commit()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2028: in commit\n    trans.commit(_to_root=True)\n<string>:2: in commit\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit\n    self._prepare_impl()\n<string>:2: in _prepare_impl\n    ???\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go\n    ret_value = fn(self, *arg, **kw)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl\n    self.session.flush()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4352: in flush\n    self._flush(objects)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4487: in _flush\n    with util.safe_reraise():\n.venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__\n    raise exc_value.with_traceback(exc_tb)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4448: in _flush\n    flush_context.execute()\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute\n    rec.execute(self)\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute\n    util.preloaded.orm_persistence.save_obj(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj\n    _emit_insert_statements(\n.venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements\n    result = connection.execute(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1418: in execute\n    return meth(\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection\n    return connection._execute_clauseelement(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement\n    ret = self._execute_context(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1821: in _execute_context\n    self._handle_dbapi_exception(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1815: in _execute_context\n    context = constructor(\n.venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:1476: in _init_compiled\n    flattened_processors[key](compiled_params[key])\n.venv/lib/python3.13/site-packages/sqlalchemy/dialects/sqlite/base.py:1067: in process\n    raise TypeError(\nE   sqlalchemy.exc.StatementError: (builtins.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.\nE   [SQL: INSERT INTO invoices (customer_id, supplier_id, invoice_no, date, due_date, terms, invoice_type, currency, status, place_of_supply, place_of_supply_state_code, eway_bill_number, reverse_charge, export_supply, bill_to_address, ship_to_address, taxable_value, total_discount, cgst, sgst, igst, utgst, cess, round_off, grand_total, paid_amount, balance_amount, notes, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)]\nE   [parameters: [{'balance_amount': Decimal('1000.00'), 'paid_amount': Decimal('0.00'), 'status': 'Draft', 'date': '2025-01-14', 'grand_total': Decimal('1000.00'), 'in ... (150 characters truncated) ... 'ship_to_address': None, 'taxable_value': None, 'cgst': None, 'place_of_supply_state_code': None, 'bill_to_address': None, 'sgst': None, 'igst': None}]]\n=============================== warnings summary ===============================\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.8/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n.venv/lib/python3.13/site-packages/starlette/formparsers.py:12\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/starlette/formparsers.py:12: PendingDeprecationWarning: Please use `import python_multipart` instead.\n    import multipart\n\n.venv/lib/python3.13/site-packages/reportlab/lib/rl_safe_eval.py:12\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/reportlab/lib/rl_safe_eval.py:12: DeprecationWarning: ast.NameConstant is deprecated and will be removed in Python 3.14; use ast.Constant instead\n    haveNameConstant = hasattr(ast,'NameConstant')\n\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/schema.py:3596: 2 warnings\ntests/backend/test_purchase_payments.py: 14 warnings\ntests/backend/test_invoice_payments.py: 14 warnings\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/sqlalchemy/sql/schema.py:3596: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    return util.wrap_callable(lambda ctx: fn(), fn)  # type: ignore\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n--- generated xml file: /Users/vivekm/code/ipsc/test_reports/smoke_tests.xml ---\n=========================== short test summary info ============================\nFAILED tests/backend/test_auth.py::test_login_returns_token - sqlalchemy.exc....\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_create_purchase_payment_success\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_create_purchase_payment_invalid_purchase\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_create_purchase_payment_invalid_amount\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_list_purchase_payments\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_list_purchase_payments_no_payments\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_purchase_payment_full_payment\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_purchase_payment_validation\nFAILED tests/backend/test_purchase_payments.py::TestPurchasePayments::test_purchase_payment_edge_cases\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_create_invoice_payment_success\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_create_invoice_payment_invalid_invoice\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_list_invoice_payments\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_invoice_payment_full_payment\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_invoice_payment_validation\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_delete_invoice_payment\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_invoice_payment_edge_cases\nFAILED tests/backend/test_invoice_payments.py::TestInvoicePayments::test_invoice_payment_multiple_payments\n======================= 17 failed, 40 warnings in 2.33s ========================\n",
      "stderr": "",
      "success": false
    },
    "backend": {
      "return_code": 4,
      "stdout": "",
      "stderr": "(trapped) error reading bcrypt version\nTraceback (most recent call last):\n  File \"/Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/passlib/handlers/bcrypt.py\", line 620, in _load_backend_mixin\n    version = _bcrypt.__about__.__version__\n              ^^^^^^^^^^^^^^^^^\nAttributeError: module 'bcrypt' has no attribute '__about__'\nERROR: usage: __main__.py [options] [file_or_dir] [file_or_dir] [...]\n__main__.py: error: unrecognized arguments: --cov=backend --cov-report=html:coverage_reports/backend --cov-report=json:coverage_reports/backend_coverage.json --cov-report=term-missing\n  inifile: /Users/vivekm/code/ipsc/pyproject.toml\n  rootdir: /Users/vivekm/code/ipsc\n\n",
      "success": false
    },
    "integration": {
      "return_code": 2,
      "stdout": "============================= test session starts ==============================\nplatform darwin -- Python 3.13.5, pytest-8.3.2, pluggy-1.6.0\nrootdir: /Users/vivekm/code/ipsc\nconfigfile: pyproject.toml\nplugins: asyncio-0.23.8, anyio-4.10.0\nasyncio: mode=Mode.STRICT\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________________ ERROR collecting tests/e2e/test_user_flows.py _________________\nImportError while importing test module '/Users/vivekm/code/ipsc/tests/e2e/test_user_flows.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/e2e/test_user_flows.py:3: in <module>\n    from playwright.sync_api import sync_playwright, expect\nE   ModuleNotFoundError: No module named 'playwright'\n------------------------------- Captured stderr --------------------------------\n(trapped) error reading bcrypt version\nTraceback (most recent call last):\n  File \"/Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/passlib/handlers/bcrypt.py\", line 620, in _load_backend_mixin\n    version = _bcrypt.__about__.__version__\n              ^^^^^^^^^^^^^^^^^\nAttributeError: module 'bcrypt' has no attribute '__about__'\n=============================== warnings summary ===============================\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/pydantic/_internal/_config.py:291: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.8/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n.venv/lib/python3.13/site-packages/starlette/formparsers.py:12\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/starlette/formparsers.py:12: PendingDeprecationWarning: Please use `import python_multipart` instead.\n    import multipart\n\n.venv/lib/python3.13/site-packages/reportlab/lib/rl_safe_eval.py:12\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/reportlab/lib/rl_safe_eval.py:12: DeprecationWarning: ast.NameConstant is deprecated and will be removed in Python 3.14; use ast.Constant instead\n    haveNameConstant = hasattr(ast,'NameConstant')\n\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/schema.py:3596\n.venv/lib/python3.13/site-packages/sqlalchemy/sql/schema.py:3596\n  /Users/vivekm/code/ipsc/.venv/lib/python3.13/site-packages/sqlalchemy/sql/schema.py:3596: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).\n    return util.wrap_callable(lambda ctx: fn(), fn)  # type: ignore\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n- generated xml file: /Users/vivekm/code/ipsc/test_reports/integration_tests.xml -\n=========================== short test summary info ============================\nERROR tests/e2e/test_user_flows.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n======================== 12 warnings, 1 error in 0.08s =========================\n",
      "stderr": "",
      "success": false
    },
    "frontend": {
      "return_code": 1,
      "stdout": "\n> cashflow-frontend@1.4.3 test\n> vitest --run --coverage --watchAll=false\n\n",
      "stderr": "file:///Users/vivekm/code/ipsc/frontend/node_modules/cac/dist/index.mjs:400\n          throw new CACError(`Unknown option \\`${name.length > 1 ? `--${name}` : `-${name}`}\\``);\n                ^\n\nCACError: Unknown option `--watchAll`\n    at Command.checkUnknownOptions (file:///Users/vivekm/code/ipsc/frontend/node_modules/cac/dist/index.mjs:400:17)\n    at CAC.runMatchedCommand (file:///Users/vivekm/code/ipsc/frontend/node_modules/cac/dist/index.mjs:598:13)\n    at CAC.parse (file:///Users/vivekm/code/ipsc/frontend/node_modules/cac/dist/index.mjs:537:12)\n    at file:///Users/vivekm/code/ipsc/frontend/node_modules/vitest/dist/cli.js:67:5\n    at ModuleJob.run (node:internal/modules/esm/module_job:371:25)\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:669:26)\n    at async main (file:///Users/vivekm/code/ipsc/frontend/node_modules/vitest/dist/cli-wrapper.js:61:5)\n\nNode.js v24.5.0\n",
      "success": false
    }
  },
  "coverage_data": {},
  "critical_issues_status": {
    "purchase_payment_save": "FAILING",
    "invoice_payment_links": "FAILING",
    "invoice_list": "NEEDS_VERIFICATION"
  }
}