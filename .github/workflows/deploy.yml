name: Automated Deployment Pipeline
on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type to deploy (see docs/DEPLOYMENT_BUILDS.md)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - docker-prod
          - docker-prod-lite
          - prod
          - prod-lite

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build-backend.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'dev')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Development
        run: |
          echo "Deploying to Development Environment"
          # Use docker compose for dev deployment
          cd deployment/docker
          docker compose -f docker-compose.dev.yml down
          docker compose -f docker-compose.dev.yml pull || true
          docker compose -f docker-compose.dev.yml up -d
          
          # Wait for services to be healthy
          sleep 45
          
          # Run health checks
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:5173/ || exit 1

      - name: Post-Deployment Smoke Checks
        run: |
          echo "Running post-deployment smoke checks"
          curl -sSf http://localhost:8000/health >/dev/null
          curl -sSf http://localhost:5173/ >/dev/null

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Development deployment successful"
          else
            echo "❌ Development deployment failed"
          fi

  # Deploy to Local Prod-like (docker-prod)
  deploy-docker-prod:
    name: Deploy to Local Prod-like (docker-prod)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'docker-prod')
    environment: docker-prod
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy docker-prod stack (local prod-like)
        run: |
          echo "Deploying docker-prod (local prod-like)"
          cd deployment/docker
          docker compose -f docker-compose.prod.local.yml down
          docker compose -f docker-compose.prod.local.yml pull || true
          docker compose -f docker-compose.prod.local.yml up -d
          
          # Wait for services to be healthy
          sleep 60
          
          # Run health checks
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost/ || exit 1

      - name: docker-prod Smoke Checks
        run: |
          echo "Running docker-prod smoke checks"
          curl -sSf http://localhost:8000/health >/dev/null
          curl -sSf http://localhost/ >/dev/null

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ docker-prod deployment successful"
          else
            echo "❌ docker-prod deployment failed"
          fi

  # Deploy to Prod-lite (distributable single-tenant)
  deploy-prod-lite:
    name: Deploy to Prod-lite
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'prod-lite')
    environment: prod-lite
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Prod-lite
        run: |
          echo "Deploying to Prod-lite"
          cd deployment/docker
          docker compose -f docker-compose.prod-lite.yml down
          docker compose -f docker-compose.prod-lite.yml pull || true
          docker compose -f docker-compose.prod-lite.yml up -d
          
          # Wait for services to be healthy
          sleep 60
          
          # Run health checks
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost/ || exit 1

      - name: Prod-lite Smoke Checks
        run: |
          echo "Running prod-lite smoke checks"
          curl -sSf http://localhost:8000/health >/dev/null
          curl -sSf http://localhost/ >/dev/null

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Prod-lite deployment successful"
          else
            echo "❌ Prod-lite deployment failed"
          fi

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-docker-prod]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'prod')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to Production Environment"
          cd deployment/docker
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml pull || true
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          sleep 75
          
          # Run health checks
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost/ || exit 1

      - name: Production Smoke Checks
        run: |
          echo "Running production smoke checks"
          curl -sSf http://localhost:8000/health >/dev/null
          curl -sSf http://localhost/ >/dev/null

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated production deployment
            
            - Build: ${{ github.sha }}
            - Build Type: prod
            - Deployed at: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  # Package Easy Deployment Artifacts (uses release-packager.sh)
  package-easy-deployment:
    name: Package Easy Deployment
    runs-on: ubuntu-latest
    needs: [build-and-test]
    # Only run when explicitly requested for distributable build types
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.build_type == 'prod' || github.event.inputs.build_type == 'prod-lite') }}
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker Hub credentials
        run: |
          if [ -z "${DOCKERHUB_USERNAME}" ] || [ -z "${DOCKERHUB_TOKEN}" ]; then
            echo "Docker Hub credentials are required for packaging (release-packager.sh pushes to Docker Hub)." >&2
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Run release packager
        run: |
          set -euo pipefail
          VERSION="${GITHUB_RUN_NUMBER}"
          # Map workflow build_type to packager build-type names
          case "${{ github.event.inputs.build_type }}" in
            prod)
              BUILD_TYPE="production" ;;
            prod-lite)
              BUILD_TYPE="prod-lite" ;;
            *)
              echo "Unsupported build_type for packaging: ${{ github.event.inputs.build_type }}" >&2
              exit 1 ;;
          esac
          echo "Packaging easy deployment for build_type=${BUILD_TYPE} version=${VERSION}"
          bash scripts/release-packager.sh --build-type "$BUILD_TYPE" "$VERSION" "$DOCKERHUB_USERNAME"

      - name: Upload Easy Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: profitpath-easy-deploy-${{ github.event.inputs.build_type }}-v${{ github.run_number }}
          path: |
            profitpath-v${{ github.run_number }}-windows.zip
            profitpath-v${{ github.run_number }}-linux-mac.tar.gz
            deployment-package/**

  # Rollback Mechanism
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-docker-prod, deploy-prod-lite, deploy-prod]
    if: failure() && (needs.deploy-dev.result == 'failure' || needs.deploy-docker-prod.result == 'failure' || needs.deploy-prod-lite.result == 'failure' || needs.deploy-prod.result == 'failure')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback Deployment
        run: |
          echo "🚨 Rolling back deployment due to failure"
          
          # Determine which environment failed and rollback
          if [ "${{ needs.deploy-dev.result }}" == "failure" ]; then
            echo "Rolling back development environment"
            cd deployment/docker
            docker compose -f docker-compose.dev.yml down
            # Restore from backup or previous version
          fi
          
          if [ "${{ needs.deploy-docker-prod.result }}" == "failure" ]; then
            echo "Rolling back docker-prod environment"
            cd deployment/docker
            docker compose -f docker-compose.prod.local.yml down
          fi

          if [ "${{ needs.deploy-prod-lite.result }}" == "failure" ]; then
            echo "Rolling back prod-lite environment"
            cd deployment/docker
            docker compose -f docker-compose.prod-lite.yml down
          fi
          
          if [ "${{ needs.deploy-prod.result }}" == "failure" ]; then
            echo "Rolling back production environment"
            cd deployment/docker
            docker compose -f docker-compose.prod.yml down
          fi

      - name: Notify Rollback
        run: |
          echo "🚨 Deployment rolled back due to failure"
          echo "Please check the logs and fix the issues before redeploying"
