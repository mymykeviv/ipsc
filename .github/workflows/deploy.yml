name: Automated Deployment Pipeline
on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Development
        run: |
          echo "Deploying to Development Environment"
          # Use docker-compose for dev deployment
          cd deployment/docker
          docker-compose -f docker-compose.dev.yml down
          docker-compose -f docker-compose.dev.yml pull
          docker-compose -f docker-compose.dev.yml up -d
          
          # Wait for services to be healthy
          sleep 30
          
          # Run health checks
          curl -f http://localhost:8000/api/health || exit 1
          curl -f http://localhost:3000/ || exit 1

      - name: Run Post-Deployment Tests
        run: |
          echo "Running post-deployment tests"
          cd tests
          python test_suite.py --env dev

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Development deployment successful"
          else
            echo "‚ùå Development deployment failed"
          fi

  # Deploy to UAT
  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'uat')
    environment: uat
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to UAT
        run: |
          echo "Deploying to UAT Environment"
          cd deployment/docker
          docker-compose -f docker-compose.uat.yml down
          docker-compose -f docker-compose.uat.yml pull
          docker-compose -f docker-compose.uat.yml up -d
          
          # Wait for services to be healthy
          sleep 45
          
          # Run health checks
          curl -f http://localhost:8001/api/health || exit 1
          curl -f http://localhost:3001/ || exit 1

      - name: Run UAT Tests
        run: |
          echo "Running UAT tests"
          cd tests
          python test_suite.py --env uat

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ UAT deployment successful"
          else
            echo "‚ùå UAT deployment failed"
          fi

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-uat]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to Production Environment"
          cd deployment/docker
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          sleep 60
          
          # Run health checks
          curl -f http://localhost:8002/api/health || exit 1
          curl -f http://localhost:3002/ || exit 1

      - name: Run Production Tests
        run: |
          echo "Running production tests"
          cd tests
          python test_suite.py --env prod

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated production deployment
            
            - Build: ${{ github.sha }}
            - Environment: Production
            - Deployed at: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Production deployment successful"
          else
            echo "‚ùå Production deployment failed"
          fi

  # Rollback Mechanism
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-uat, deploy-prod]
    if: failure() && (needs.deploy-dev.result == 'failure' || needs.deploy-uat.result == 'failure' || needs.deploy-prod.result == 'failure')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback Deployment
        run: |
          echo "üö® Rolling back deployment due to failure"
          
          # Determine which environment failed and rollback
          if [ "${{ needs.deploy-dev.result }}" == "failure" ]; then
            echo "Rolling back development environment"
            cd deployment/docker
            docker-compose -f docker-compose.dev.yml down
            # Restore from backup or previous version
          fi
          
          if [ "${{ needs.deploy-uat.result }}" == "failure" ]; then
            echo "Rolling back UAT environment"
            cd deployment/docker
            docker-compose -f docker-compose.uat.yml down
          fi
          
          if [ "${{ needs.deploy-prod.result }}" == "failure" ]; then
            echo "Rolling back production environment"
            cd deployment/docker
            docker-compose -f docker-compose.prod.yml down
          fi

      - name: Notify Rollback
        run: |
          echo "üö® Deployment rolled back due to failure"
          echo "Please check the logs and fix the issues before redeploying"
